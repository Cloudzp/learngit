一 git基础命令
1 什么事git？
   git是由linux社区人员使用c语言编写的分布式版本管理工具；
2 安装完成后的信息绑定；
  命令：$ git config --global user.name "username"
        $ git config --global user.email "email_address"
3 创建版本库；
   命令：$ mkdir git  // 创建文件夹；
         $ cd git  //切换到工作目录；
		 $ pwd //查看当前工作目录；
		 $ git init //将当前工作目录建成版本库；
		 显示 Initialized  empty Git repository in /user/git
4 把文件添加到仓库；
   命令：$ git add readme.txt
5 提交文件到本地仓库；
   命令：$ git commit -m "注释性文字"  //注意：文件添加时需要逐一添加，
   提交是一并提交；
6 查看仓库当前状态；
    命令：$ git status //有与仓库文件不一致时会用红色标出；
7 查看具体哪里不同；
   命令：$ git diff
8 版本回退；
   命令：$ git reset --hard HEAD^// 一个^表示回退一个版本，两个表示回退两个版本、
    以此类推，
	     $ git reset --hard HEAD^ 100// 表示回退到100个版本以前；
		 $ git reset --hard commitid(提交时的版本号)//表示回到对应的版本；；
9 查看所有版本信息；
   命令：$ git log //次命令为多行显示详细信息；
         $ git log --pretty=oneline //次命令为显示单行信息，只显示版本号和提交注释
		 $ git relog //可用来查看被撤销的版本号；
10 撤销修改；
    命令：$ git checkout --readme.txt //撤销工作区文件的修改，使文件回到第一次add或者commit的时期；中的--很重要 没有了-- 就表示创建新的分之；
11 删除版本库中的文件；
    命令：$ git rm <file> //想要删除版本库中的文件时可使用此条命令；注意：会同时删除掉工作区的文件，
	 想要回复文件，可使用命令：git reset HEAD filename 恢复版本库中的文件，使用 git checkout -- filename 恢复工作区的文件；
二 远程仓库：
   1 与远程仓库建立连接（使用免费的GitHub远程仓库）：
   2 设置本地信息；
      a)在用户目录下创建.ssh文件 方法：使用命令：$ ssh-keygen -t rsa -C "447954448@qq.com" 
	    然后一路回车，就创建好了；
	  b)注册并登陆账号-->点击右边图像-->点击your profile -->点击左边菜单选项中的SSH and GPG Keys -->点击New SSH Key --> 随便填写一个标题 -->将.ssh文件下的id_rsa.pub文件中的内容添加到文本框中 点击 保存 ok！！
   3 创建并添加添加远程仓库；
      登陆你的GitHub 点击上面的加号--》 点击 new repository(新建一个仓库)--》在repo name中填写 learngit 其他选择默认点击提交；
	  在本地界面（切换到本地仓库目录下输入）
	  输入命令：$ git remote add origin git@github.com:Cloudzp/learngit.git
	            $ git remote add origin git@server-name(要连接的中心服务器的油箱):path（你的GitHub用户名）/repo-name.git(要连接的仓库名)
      添加成功后远程仓库的名字就是：origin
   4将本地文件推送到远程库上：
     命令：$ git push -u origin master // 第一次推送时需要加上参数 -u 将本地的分之与远程的分之关联起来；
	         //master 表示当本地仓库版本库中的一个分之；
	       $ git push origin master //表示将本地的最新版本信息推送到GitHub
    5 根据远程仓库克隆本地仓库：
	  命令：$ git clone git@github.com:Cloudzp/learngit.git
 三 分支管理：
    1 什么是分支管理？
	   多个不同的正在进行的工作目录！
	2 为什么使用分支？
	    当你有工作文件既不想上传到被大家公用，放在本地有害怕文件丢失的时候就需要创建分支
		当你完成自己的工作后可通过合并分支；
	3 创建与合并分支
	   a)创建 dev 指针：
	      命令：$ git checkout -b dev（创建加切换） //git checkout 命令上加上参数-b表示创建并且换，相当于以                    下两条命令：
		      $ git branch dev
		      $ git checkout dev
           b)查看当前分支：
              命令：$ git branch //结果是列出所有的分支；
	   c)合并分支：
	       命令：$ git merge dev // 作用是合并制定分支到当前分支；注意:合并分支时当前分支不能有修改或未提交的文件，切换分支也一样；
		   干货：$ git merge --no--ff -m "写入分支合并时候的说明"// 使用这种命令合并分支（表示不是用默认的合并模式：fast forward）） 会留下历史记录我们可一查看分支的合并记录；
		   
	   d)删除分支：
	        命令：$ git branch -d dev //表示删除dev分支
   4) bug分支：
      使用场景：当你正在分支上写代码时突然有一个bug需要修复，此时你还不想保存现有的代码到分支；你需要将现在的工作储藏起来--
	  1 可以使用命令：$ git stash //这样你的工作取就会变得干净了，你就可以去创建新的分之了；
	  2 等你修复好bug之后，你就可以回来通过命令：$ git stash list 查看你所有的缓存内容了；
	  3 你可以通过两个命令恢复你上次正在进行的工作：
	    命令1：git stash apply // 次命令恢复但不会删除你的缓存文件，需要你需要使用命令：$ git stash drop 删除文件stash内容；
		命令2：git stash pop //次命令恢复并删除你的缓存文件；
   5) 添加功能分支（feature）：
      使用场景：当你需要在已经提交的代码中添加一项新功能的时候，你就需要创建一个新的分支来完成工作；
	      第一步：命令：$ git checkout -b feature-vulan //创建一个名字为：feature-vulan 的分支；
	      第二步：然后去完成你的开发工作，
		          1）意外情况：当你正准备提交的时候你的老板告诉你功能取消；此时可以通过命令：
		               $ git branch -D feature-vulan //用来强行删除未合并的分支；
		           2） 正常情况： 合并分支，并删除 feature-vulan分支；
五 远程仓库的使用：
    1 产看远程连接信息：
	   命令：$ git remote 也可以使用 $ git remote -v //查看更详细的连接信息；